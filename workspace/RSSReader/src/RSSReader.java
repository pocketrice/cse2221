import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Lucas Xie
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals(
                "channel") : "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String titleItem, descItem;

        int titleIndex = getChildElement(channel, "title");
        if (channel.child(titleIndex).numberOfChildren() == 1) {
            titleItem = channel.child(titleIndex).child(0).label();
        } else {
            titleItem = "Empty Title";
        }

        int descIndex = getChildElement(channel, "description");
        if (channel.child(descIndex).numberOfChildren() == 1) {
            descItem = channel.child(descIndex).child(0).label();
        } else {
            descItem = "No description.";
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + titleItem + "</title>");
        outputCSS(out);
        out.println("</head>");
        out.println("<body>");
        out.println(
                "\t<h1><a href='"
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "'>" + titleItem + "</a></h1>");
        out.println("\t<p>" + descItem + "</p>");
        out.println("\t<table border='1'>");
        out.println("\t\t<tr>");
        out.println("\t\t\t<th>Date</th>");
        out.println("\t\t\t<th>Source</th>");
        out.println("\t\t\t<th>News</th>");
        out.println("\t\t</tr>");
    }

    /**
     * Outputs style tag and CSS rules in the generated HTML file.
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [a HTML style tag with CSS rules]
     * </pre>
     */
    private static void outputCSS(SimpleWriter out) {
        out.println("<style>");
        out.println("\tbody {");
        out.println("\t\tfont-family: 'Verdana', sans-serif;");
        out.println("\t\tpadding: 20px;");
        out.println("\t}\n");

        out.println("\th1 {");
        out.println("\t\ttext-align: center;");
        out.println("\t}\n");

        out.println("\tp {");
        out.println("\t\tfont-style: italic;");
        out.println("\t}\n");

        out.println("\ttd {");
        out.println("\t\tpadding: 3px 5px;");
        out.println("\t}");
        out.println("</style>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int childIndex = -1;
        for (int i = 0; childIndex == -1 && i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                childIndex = i;
            }
        }

        return childIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String pubDateItem, sourceItem, descriptorItem;

        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");

        if (pubDateIndex != -1) {
            pubDateItem = item.child(pubDateIndex).label();
        } else {
            pubDateItem = "No date available.";
        }

        if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() == 1) {
            sourceItem = "<a href='"
                    + item.child(sourceIndex).attributeValue("url") + "'>"
                    + item.child(sourceIndex).child(0).toString() + "</a>";
        } else {
            sourceItem = "No source available.";
        }

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");

        if (item.child(titleIndex).numberOfChildren() == 1) {
            descriptorItem = item.child(titleIndex).child(0).label();
        } else if (item.child(descriptionIndex).numberOfChildren() == 1) {
            descriptorItem = item.child(descriptionIndex).child(0).label();
        } else {
            descriptorItem = "No title available.";
        }

        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1) {
            descriptorItem = "<a href='"
                    + item.child(linkIndex).child(0).label() + "'>"
                    + descriptorItem + "</a>";
        }

        out.println("<tr>");
        out.println("\t<td>" + pubDateItem + "</td>");
        out.println("\t<td>" + sourceItem + "</td>");
        out.println("\t<td>" + descriptorItem + "</td>");
        out.println("</tr>");
    }

    /**
     * Validates and reports whether the valid XML document's root tag has label
     * "rss", that it has an attribute of "version" with value "2.0".
     *
     * @param item
     *            the news item
     * @requires [the label of the root of xml is a tag]
     * @return whether or not xml has label "rss" and has attribute "version"
     *         with value "2.0"
     * @ensures <pre>
     * validateRss = [whether or not xml has label "rss" and has
     * attribute "version" with value "2.0"]
     * </pre>
     */
    private static boolean validateRss(XMLTree item) {
        return (item.isTag() && item.label().equals("rss")
                && item.hasAttribute("version")
                && item.attributeValue("version").equals("2.0"));
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        /*
         * Open I/O streams.
         */
        SimpleReader in = new SimpleReader1L();
        SimpleWriter consoleOut = new SimpleWriter1L();

        /*
         * Prompt for source URL until valid RSS 2.0 document is extracted.
         */
        boolean isValidRSS = false;
        XMLTree xml;

        do {
            consoleOut.println("Suggestions:");
            consoleOut.println("* https://www.teamfortress.com/rss.xml");
            consoleOut.println("* https://xkcd.com/rss.xml");
            consoleOut.println("* https://hnrss.org/frontpage");
            consoleOut.println("* https://news.yahoo.com/rss\n");
            consoleOut.print("Enter the URL of an RSS 2.0 news feed: ");
            String url = in.nextLine();

            /*
             * Read XML input and initialize XMLTree. If input is not legal XML,
             * this statement will fail.
             */
            xml = new XMLTree1(url);

            /*
             * Validate extracted valid XML document if it is a valid RSS 2.0
             * XML document.
             */
            if (validateRss(xml)) {
                isValidRSS = true;
            } else {
                consoleOut.println(
                        "Violation of: XML document is not a valid RSS 2.0 doc.\n\n");
            }
        } while (!isValidRSS);

        /*
         * Prompt user for output filepath and prepare to write there.
         */
        consoleOut.print("Enter plain name of output HTML file: ");
        String plainFileName = in.nextLine();
        SimpleWriter htmlOut = new SimpleWriter1L(
                "src/" + plainFileName + ".html");

        /*
         * Process RSS XML document and output to rss.html file.
         */
        XMLTree channel = xml.child(0);
        outputHeader(channel, htmlOut);

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree candidate = channel.child(i);
            if (candidate.label().equals("item")) {
                processItem(candidate, htmlOut);
            }
        }

        outputFooter(htmlOut);
        consoleOut.println("Finished writing to " + plainFileName + ".html.");

        /*
         * Close I/O streams.
         */
        in.close();
        consoleOut.close();
        htmlOut.close();
    }

}
